# Generated by Django 4.0.5 on 2022-06-12 23:26

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import litsource.models
import wagtail.blocks
import wagtail.fields
import wagtail.snippets.blocks
import wagtail_headless_preview.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('litsource', '0001_initial'),
        ('wagtailcore', '0069_log_entry_jsonfield'),
    ]

    operations = [
        migrations.CreateModel(
            name='SubstanceIndex',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
            ],
            options={
                'verbose_name': 'Страница компонентов',
            },
            bases=(wagtail_headless_preview.models.HeadlessMixin, 'wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='SubstanceType',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
            ],
            options={
                'verbose_name': 'Тип компонентов',
                'verbose_name_plural': 'Типы компонентов',
            },
            bases=(wagtail_headless_preview.models.HeadlessMixin, 'wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='Substance',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('other_names', models.CharField(blank=True, default='', max_length=1000, verbose_name='Другие названия (через точку с запятой)')),
                ('cas_number', models.CharField(blank=True, max_length=30, validators=[django.core.validators.RegexValidator(message='CAS код для вещества в формате 1111-11-1', regex='\\b[1-9]{1}[0-9]{1,6}-\\d{2}-\\d\\b')], verbose_name='Регистрационный номер CAS')),
                ('x_value', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1.0), django.core.validators.MaxValueValidator(4.0)], verbose_name='X - относительный параметр опасности компонента отхода для окружающей среды [мин. 1, макс. 4] (если известен - указание источника обязательно)')),
                ('soil_conc', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)], verbose_name='Содержание в основных типах почв в %')),
                ('soilprops', wagtail.fields.StreamField([('SafetyClassSoil', wagtail.blocks.StructBlock([('source', wagtail.snippets.blocks.SnippetChooserBlock(litsource.models.LitSource, label='Источник литературы для значения', required=True)), ('value', wagtail.blocks.ChoiceBlock(choices=[('1', 'I класс'), ('2', 'II класс'), ('3', 'III класс'), ('4', 'не установлен')], label='Класс опасности в почве'))])), ('PDKp', wagtail.blocks.StructBlock([('source', wagtail.snippets.blocks.SnippetChooserBlock(litsource.models.LitSource, label='Источник литературы для значения', required=True)), ('value', wagtail.blocks.FloatBlock(label='Предельно допустимая концентрация в почве (ПДКп) [мг/кг]', min_value=0, required=True))])), ('ODKp', wagtail.blocks.StructBlock([('source', wagtail.snippets.blocks.SnippetChooserBlock(litsource.models.LitSource, label='Источник литературы для значения', required=True)), ('value', wagtail.blocks.FloatBlock(label='Ориентировочно допустимые концентрации в почве (ОДК) [мг/кг]', min_value=0, required=True))]))], blank=True, null=True, use_json_field=None)),
                ('dwprops', wagtail.fields.StreamField([('SafetyClassDrinkWater', wagtail.blocks.StructBlock([('source', wagtail.snippets.blocks.SnippetChooserBlock(litsource.models.LitSource, label='Источник литературы для значения', required=True)), ('value', wagtail.blocks.ChoiceBlock(choices=[('1', 'I класс'), ('2', 'II класс'), ('3', 'III класс'), ('4', 'IV класс')], label='Класс опасности в питьевой воде'))])), ('PDKw', wagtail.blocks.StructBlock([('source', wagtail.snippets.blocks.SnippetChooserBlock(litsource.models.LitSource, label='Источник литературы для значения', required=True)), ('value', wagtail.blocks.FloatBlock(label='Предельно допустимая концентрация в питьевой воде (ПДКв) [мг/л]', min_value=0, required=True))])), ('ODUw', wagtail.blocks.StructBlock([('source', wagtail.snippets.blocks.SnippetChooserBlock(litsource.models.LitSource, label='Источник литературы для значения', required=True)), ('value', wagtail.blocks.FloatBlock(label='Ориентировочные допустимые уровни в питьевой воде (ОДУ) [мг/л]', min_value=0, required=True))])), ('OBUVw', wagtail.blocks.StructBlock([('source', wagtail.snippets.blocks.SnippetChooserBlock(litsource.models.LitSource, label='Источник литературы для значения', required=True)), ('value', wagtail.blocks.FloatBlock(label='Ориентировочно безопасные уровни воздействия в питьевой воде (ОБУВ) [мг/л]', min_value=0, required=True))]))], blank=True, null=True, use_json_field=None)),
                ('fwprops', wagtail.fields.StreamField([('SafetyClassFishWater', wagtail.blocks.StructBlock([('source', wagtail.snippets.blocks.SnippetChooserBlock(litsource.models.LitSource, label='Источник литературы для значения', required=True)), ('value', wagtail.blocks.ChoiceBlock(choices=[('1', 'I класс'), ('2', 'II класс'), ('3', 'III класс'), ('4', 'IV класс')], label='Класс опасности в воде рыбохозяйственного значения'))])), ('PDKfw', wagtail.blocks.StructBlock([('source', wagtail.snippets.blocks.SnippetChooserBlock(litsource.models.LitSource, label='Источник литературы для значения', required=True)), ('value', wagtail.blocks.FloatBlock(label='Предельно допустимая концентрация в воде рыбохозяйственного значения (ПДКрх) [мг/л]', min_value=0, required=True))])), ('OBUVfw', wagtail.blocks.StructBlock([('source', wagtail.snippets.blocks.SnippetChooserBlock(litsource.models.LitSource, label='Источник литературы для значения', required=True)), ('value', wagtail.blocks.FloatBlock(label='Ориентировочно безопасные уровни воздействия в воде рыбохозяйственного значения (ОБУВ) [мг/л]', min_value=0, required=True))]))], blank=True, null=True, use_json_field=None)),
                ('airprops', wagtail.fields.StreamField([('SafetyClassAir', wagtail.blocks.StructBlock([('source', wagtail.snippets.blocks.SnippetChooserBlock(litsource.models.LitSource, label='Источник литературы для значения', required=True)), ('value', wagtail.blocks.ChoiceBlock(choices=[('1', 'I класс'), ('2', 'II класс'), ('3', 'III класс'), ('4', 'IV класс')], label='Класс опасности в воздухе'))])), ('PDKss', wagtail.blocks.StructBlock([('source', wagtail.snippets.blocks.SnippetChooserBlock(litsource.models.LitSource, label='Источник литературы для значения', required=True)), ('value', wagtail.blocks.FloatBlock(label='Предельно допустимая концентрация в воздухе средне-суточное зоны (ПДКсс) [мг/м3]', min_value=0, required=True))])), ('PDKmr', wagtail.blocks.StructBlock([('source', wagtail.snippets.blocks.SnippetChooserBlock(litsource.models.LitSource, label='Источник литературы для значения', required=True)), ('value', wagtail.blocks.FloatBlock(label='Предельно допустимая концентрация в воздухе максимальная разовая (ПДКмр) [мг/м3]', min_value=0, required=True))])), ('PDKrz', wagtail.blocks.StructBlock([('source', wagtail.snippets.blocks.SnippetChooserBlock(litsource.models.LitSource, label='Источник литературы для значения', required=True)), ('value', wagtail.blocks.FloatBlock(label='Предельно допустимая концентрация в воздухе рабочей зоны (ПДКрз) [мг/м3]', min_value=0, required=True))])), ('OBUVair', wagtail.blocks.StructBlock([('source', wagtail.snippets.blocks.SnippetChooserBlock(litsource.models.LitSource, label='Источник литературы для значения', required=True)), ('value', wagtail.blocks.FloatBlock(label='Ориентировочно безопасные уровни воздействия в воздухе [мг/м3]', min_value=0, required=True))]))], blank=True, null=True, use_json_field=None)),
                ('ecoprops', wagtail.fields.StreamField([('Persistancy', wagtail.blocks.StructBlock([('source', wagtail.snippets.blocks.SnippetChooserBlock(litsource.models.LitSource, label='Источник литературы для значения', required=True)), ('value', wagtail.blocks.ChoiceBlock(choices=[('1', 'Образование более токсичных продуктов, в т.ч. обладающих отдаленными эффектами или новыми свойствами'), ('2', 'Образование продуктов с более выраженным влиянием других критериев опасности'), ('3', 'Образование продуктов, токсичность которых близка к токсичности исходного вещества'), ('4', 'Образование менее токсичных продуктов')], label='Персистентность'))])), ('Bioaccum', wagtail.blocks.StructBlock([('source', wagtail.snippets.blocks.SnippetChooserBlock(litsource.models.LitSource, label='Источник литературы для значения', required=True)), ('value', wagtail.blocks.ChoiceBlock(choices=[('1', 'Выраженное накопление во всех звеньях'), ('2', 'Накопление в нескольких звеньях'), ('3', 'Накопление в одном из звеньев'), ('4', 'Накопление отсутствует')], label='Биоаккумуляция'))]))], blank=True, null=True, use_json_field=None)),
                ('ldprops', wagtail.fields.StreamField([('LD50', wagtail.blocks.StructBlock([('source', wagtail.snippets.blocks.SnippetChooserBlock(litsource.models.LitSource, label='Источник литературы для значения', required=True)), ('value', wagtail.blocks.FloatBlock(label='Средняя смертельная доза компонента в миллиграммах действующего вещества на 1 кг живого веса, вызывающая гибель 50% подопытных животных при однократном пероральном введении в унифицированных условиях [мг/кг]', min_value=0, required=True))])), ('LC50', wagtail.blocks.StructBlock([('source', wagtail.snippets.blocks.SnippetChooserBlock(litsource.models.LitSource, label='Источник литературы для значения', required=True)), ('value', wagtail.blocks.FloatBlock(label='Средняя смертельная концентрация вещества, вызывающая гибель 50% подопытных животных при ингаляционном поступлении в унифицированных условиях [мг/м3]', min_value=0, required=True))])), ('LC50water', wagtail.blocks.StructBlock([('source', wagtail.snippets.blocks.SnippetChooserBlock(litsource.models.LitSource, label='Источник литературы для значения', required=True)), ('value', wagtail.blocks.FloatBlock(label='Средняя смертельная концентрация вещества в воде, вызывающая гибель 50% всех взятых в опыт гидробионтов (например, рыб) через 96 часов [мг/л/96 ч]', min_value=0, required=True))]))], blank=True, null=True, use_json_field=None)),
                ('foodprops', wagtail.fields.StreamField([('PDKpp', wagtail.blocks.StructBlock([('source', wagtail.snippets.blocks.SnippetChooserBlock(litsource.models.LitSource, label='Источник литературы для значения', required=True)), ('value', wagtail.blocks.FloatBlock(label='Предельно допустимая концентрация вещества в пищевых продуктах [мг/кг]', min_value=0, required=True))])), ('MDS', wagtail.blocks.StructBlock([('source', wagtail.snippets.blocks.SnippetChooserBlock(litsource.models.LitSource, label='Источник литературы для значения', required=True)), ('value', wagtail.blocks.FloatBlock(label='Максимально допустимое содержание [мг/кг]', min_value=0, required=True))])), ('MDU', wagtail.blocks.StructBlock([('source', wagtail.snippets.blocks.SnippetChooserBlock(litsource.models.LitSource, label='Источник литературы для значения', required=True)), ('value', wagtail.blocks.FloatBlock(label='Максимально допустимый уровень [мг/кг]', min_value=0, required=True))]))], blank=True, null=True, use_json_field=None)),
                ('props', wagtail.fields.StreamField([('Kow', wagtail.blocks.StructBlock([('source', wagtail.snippets.blocks.SnippetChooserBlock(litsource.models.LitSource, label='Источник литературы для значения', required=True)), ('value', wagtail.blocks.FloatBlock(label='Коэффициент распределения в системе октанол/вода при 20° C', min_value=0, required=True))])), ('Solubility', wagtail.blocks.StructBlock([('source', wagtail.snippets.blocks.SnippetChooserBlock(litsource.models.LitSource, label='Источник литературы для значения', required=True)), ('value', wagtail.blocks.FloatBlock(label='Растворимость компонента отхода (вещества) в воде при 20° C (мг/л)', min_value=0, required=True))])), ('COD', wagtail.blocks.StructBlock([('source', wagtail.snippets.blocks.SnippetChooserBlock(litsource.models.LitSource, label='Источник литературы для значения', required=True)), ('value', wagtail.blocks.FloatBlock(label='Химическое потребление кислорода, выраженное в миллилитрах O2/100 л', min_value=0, required=True))])), ('BOD5', wagtail.blocks.StructBlock([('source', wagtail.snippets.blocks.SnippetChooserBlock(litsource.models.LitSource, label='Источник литературы для значения', required=True)), ('value', wagtail.blocks.FloatBlock(label='Биологическое потребление кислорода, выраженное в миллилитрах O2/л за 5 суток', min_value=0, required=True))])), ('Cnas', wagtail.blocks.StructBlock([('source', wagtail.snippets.blocks.SnippetChooserBlock(litsource.models.LitSource, label='Источник литературы для значения', required=True)), ('value', wagtail.blocks.FloatBlock(label='Насыщающая концентрация вещества в воздухе при 20° C и нормальном давлении [мг/м3]', min_value=0, required=True))]))], blank=True, null=True, use_json_field=None)),
                ('soil_conc_lit_source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='soil_conc', to='litsource.litsource', verbose_name='Источник литературы для содержания компонента в основных типах почв (если задано cодержание в основных типах почв, то обязателен)')),
                ('x_value_lit_source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='x_value', to='litsource.litsource', verbose_name='Источник литературы для относительного параметра опаности (если задано числовое значение X, то обязателен)')),
            ],
            options={
                'verbose_name': 'Компонент',
                'verbose_name_plural': 'Компоненты',
            },
            bases=(wagtail_headless_preview.models.HeadlessMixin, 'wagtailcore.page'),
        ),
    ]
